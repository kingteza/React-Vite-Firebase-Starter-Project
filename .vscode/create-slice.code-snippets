{
    "Generate Slice": {
        "prefix": "createSlice",
        "body": [
          "",
          "import { createAsyncThunk, createSlice, SerializedError } from '@reduxjs/toolkit';",
          "import { translations } from 'config/localization/translations';",
          "import { t } from 'i18next';",
          "import CrudMessageShower from 'util/message/CrudMessageShower';",
          "",
          "const name = 'T';",
          "type Type = any;",
          "",
          "export interface State {",
          "  items: Type[];",
          "  item?: Type;",
          "  getting: boolean,",
          "  error?: SerializedError;",
          "}",
          "",
          "const initialState: State = {",
          "  items: [],",
          "  getting: false,",
          "};",
          "",
          "export const ${1:}= createAsyncThunk('${1:}', async () => {",
          "  const message = new CrudMessageShower(t(translations.str.grn));",
          "});",
          "",
          "const slice = createSlice({",
          "  name: name,",
          "  initialState,",
          "  reducers: {},",
          "  extraReducers: (builder) => {",
          "    builder",
          "      .addCase(${1:}.pending, (state) => {",
          "        state.getting = true;",
          "        state.error = undefined;",
          "      })",
          "      .addCase(${1:}.fulfilled, (state, { payload }) => {",
          "        state.getting = false;",
          "        // state.items = payload;",
          "      })",
          "      .addCase(${1:}.rejected, (state, { error }) => {",
          "        state.getting = false;",
          "        state.error = error;",
          "      });",
          "  },",
          "});",
          "",
          "export default slice.reducer;"
        ],
        "description": "Generate Slice"
      }
}